{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PEKAT VISION SDK - Python","text":"<p>A Python module for communication with PEKAT VISION.</p>"},{"location":"#installation","title":"Installation","text":"<ul> <li><code>pip install \"pekat-vision-sdk[opencv]\"</code> - recommended</li> <li><code>pip install pekat-vision-sdk</code> - wihout <code>opencv</code>, click here for more</li> </ul>"},{"location":"#usage","title":"Usage","text":"<p>Using this SDK involves 3 basic steps:</p> <ul> <li>Instance creation</li> <li>Image analysis</li> <li>Result processing</li> </ul>"},{"location":"#creation","title":"Creation","text":"<p>Create an Instance to start a project or connect to an already running project:</p> Start a projectConnect to a running project <pre><code>from pathlib import Path\n\nfrom PekatVisionSDK import Instance\n\n# Start a project on port 8000\np = Instance(Path.home() / \"PekatVisionProjects/myProject\", port=8000)\n</code></pre> <pre><code>from PekatVisionSDK import Instance\n\n# Connect to a project running on port 8000\np = Instance(port=8000, already_running=True)\n</code></pre>"},{"location":"#analysis","title":"Analysis","text":"<p>Call the analyze method and supply it with the image, either as a numpy array, bytes or a path on disk:</p> Analyze numpyAnalyze bytesAnalyze from disk <pre><code>import cv2\n\n# Load an image as a numpy array\nimage = cv2.imread(\"path_to_image.png\")\n\nresult = p.analyze(image)\n</code></pre> <pre><code>from pathlib import Path\n\n# Load a png\nimage_bytes = Path(\"path_to_image.png\").read_bytes()\n\nresult = p.analyze(image_bytes)\n</code></pre> <pre><code># Instance will load the image as bytes\nresult = p.analyze(\"path_to_image.png\")\n</code></pre> <p>Depending on the response type, the image may or may not be present in the result, see analyze for more.</p>"},{"location":"#processing","title":"Processing","text":"<p>The result contains an encoded PNG image and the context dictionary.</p> <p>In case response type was <code>\"context\"</code>, <code>image_bytes</code> will be <code>None</code> and get_decoded_image will raise an exception.</p> Processing the result<pre><code># Getting the context\ncontext = result.context\n\n# Getting the result of evaluation\nevaluation_result = context[\"result\"]\n\n# Getting the numpy image\ntry:\n    image = result.get_decoded_image()\nexcept ValueError:\n    print(\"analyze called with response_type='context'\")\n\n# In case we need just PNG bytes\nimage_bytes = result.image_bytes  # This can be None\n</code></pre>"},{"location":"#without-opencv","title":"Without OpenCV","text":"<p>You can install this module without OpenCV if you</p> <ul> <li>only want to use <code>response_type=\"context\"</code></li> <li>don't need to use <code>Result.get_decoded_image()</code></li> </ul>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#220-2025-01-14","title":"2.2.0 - 2025-01-14","text":""},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Use shared memory for analyzing locally. PR #33 by @Adamasterr.</li> </ul>"},{"location":"CHANGELOG/#210-2024-10-08","title":"2.1.0 - 2024-10-08","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Add <code>send_random</code> method to <code>Instance</code>. PR #27 by @Adamasterr.</li> </ul>"},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>Create a random number generator in <code>__init__</code>. PR #30 by @Adamasterr.</li> </ul>"},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Fix <code>AttributeError</code> when stopping a remote <code>Instance / Analyzer</code>. PR #26 by @Adamasterr</li> </ul>"},{"location":"CHANGELOG/#200-2024-07-08","title":"2.0.0 - 2024-07-08","text":"<p>If you are upgrading: please see <code>UPGRADING.md</code>.</p>"},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>Add Material for MkDocs documentation.</li> <li>Add <code>\"image\"</code> to allowed response types.</li> <li>Add docstrings to errors.</li> <li>Add named parameters to some errors.</li> </ul>"},{"location":"CHANGELOG/#changed_2","title":"Changed","text":"<ul> <li>Breaking: Change minimal python version to 3.8.</li> <li>Breaking: Move <code>Instance</code> to <code>instance.py</code>.</li> <li>Breaking: Move errors to <code>errors.py</code>.</li> <li>Breaking: Change return type of <code>Instance.analyze</code> to new type <code>Result(NamedTuple)</code>.</li> <li>Change docstring style to <code>google</code>.</li> <li>Simplify <code>README.md</code>.</li> </ul>"},{"location":"CHANGELOG/#removed","title":"Removed","text":"<ul> <li>Breaking: Remove the <code>password</code> and <code>api_key</code> parameters.</li> <li>Remove unused <code>CannotBeTerminated</code> exception.</li> </ul>"},{"location":"CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li>Fix <code>Instance.stop()</code> method trying to stop an <code>already_running</code> project.</li> <li>Fix <code>Instance(already_running=False)</code> not searching default install dir on Linux.</li> <li>Fix project path not accepting <code>~</code> as a home directory.</li> </ul>"},{"location":"UPGRADING/","title":"Upgrading guide","text":""},{"location":"UPGRADING/#200","title":"2.0.0","text":"<ul> <li>Replace <code>from PekatVisionSDK.pekat_vision_instance import ...</code> with import from the toplevel module: <code>from PekatVisionSDK import ...</code></li> <li>Replace <code>context = Instance.analyze(..., response_type=\"context\")</code> with <code>context = Instance.analyze(..., response_type=\"context\").context</code></li> <li>Remove <code>api_key</code> and <code>password</code>, they have been removed in PEKAT VISION</li> </ul>"},{"location":"documentation/errors/","title":"Errors","text":"<p>Module with all the custom errors.</p>"},{"location":"documentation/errors/#PekatVisionSDK.errors.DistNotFoundError","title":"DistNotFoundError","text":"<p>Raised when no PEKAT VISION was found in the default installation directory.</p> <ul> <li>On <code>Windows</code>, the search location is <code>C:\\Program Files</code>.</li> <li>On <code>Linux</code>, the search location is <code>/opt/PEKAT</code>.</li> </ul> <p>Location is searched for the <code>pekat_vision/pekat_vision(.exe)</code> binary.</p>"},{"location":"documentation/errors/#PekatVisionSDK.errors.DistNotExistsError","title":"DistNotExistsError","text":"<pre><code>DistNotExistsError(path: Path, *args: tuple)\n</code></pre> <p>Raised when PEKAT VISION does not exist in the specified path.</p>"},{"location":"documentation/errors/#PekatVisionSDK.errors.PortIsAllocatedError","title":"PortIsAllocatedError","text":"<pre><code>PortIsAllocatedError(port: int, *args: tuple)\n</code></pre> <p>Raised when the specified port is already used by another process.</p>"},{"location":"documentation/errors/#PekatVisionSDK.errors.InvalidDataTypeError","title":"InvalidDataTypeError","text":"<pre><code>InvalidDataTypeError(type_: type, *args: tuple)\n</code></pre> <p>Raised when the input data is not a file path, bytes or a numpy array.</p>"},{"location":"documentation/errors/#PekatVisionSDK.errors.InvalidResponseTypeError","title":"InvalidResponseTypeError","text":"<pre><code>InvalidResponseTypeError(response_type: str, *args: tuple)\n</code></pre> <p>Raised when the response type is invalid.</p>"},{"location":"documentation/errors/#PekatVisionSDK.errors.ProjectNotFoundError","title":"ProjectNotFoundError","text":"<pre><code>ProjectNotFoundError(path: Path, *args: tuple)\n</code></pre> <p>Raised when the project was not found in the specified location.</p>"},{"location":"documentation/errors/#PekatVisionSDK.errors.PekatNotStartedError","title":"PekatNotStartedError","text":"<p>Raised when <code>Instance</code> couldn't start a project.</p>"},{"location":"documentation/errors/#PekatVisionSDK.errors.OpenCVImportError","title":"OpenCVImportError","text":"<p>Raised when the <code>response_type</code> is not <code>\"context\"</code> and OpenCV is not installed: <code>cv2</code>.</p>"},{"location":"documentation/errors/#PekatVisionSDK.errors.NoConnectionError","title":"NoConnectionError","text":"<p>Raised when <code>ping</code> times out.</p>"},{"location":"documentation/instance/","title":"Instance","text":""},{"location":"documentation/instance/#PekatVisionSDK.Instance","title":"Instance","text":"<pre><code>Instance(\n    project_path: Optional[StrOrPathLike] = None,\n    dist_path: Optional[StrOrPathLike] = None,\n    port: Optional[int] = None,\n    host: str = \"127.0.0.1\",\n    *,\n    already_running: bool = False,\n    disable_code: bool = False,\n    tutorial_only: bool = False,\n    context_in_body: bool = False,\n    wait_for_init_model: bool = False,\n    ping: bool = True,\n    gpu: int = 0\n)\n</code></pre> <p>A class for starting or connecting to a PEKAT VISION project.</p> <p>Parameters:</p> Name Type Description Default <code>project_path</code> <code>Optional[StrOrPathLike]</code> <p>Path to an existing project. Ignored if <code>already_running</code> is <code>True</code>.</p> <code>None</code> <code>dist_path</code> <code>Optional[StrOrPathLike]</code> <p>Path to PEKAT VISION installation folder. Ignored if <code>already_running</code> is <code>True</code>.</p> <code>None</code> <code>port</code> <code>Optional[int]</code> <p>Port of the project.</p> <code>None</code> <code>host</code> <code>str</code> <p>IP address of the project. Set to <code>\"0.0.0.0\"</code> to listen on all interfaces.</p> <code>'127.0.0.1'</code> <code>already_running</code> <code>bool</code> <p>Whether the project is already running. If the project is not already running, project will be started.</p> <code>False</code> <code>disable_code</code> <code>bool</code> <p>Disable code module. Ignored if <code>already_running</code> is <code>True</code>.</p> <code>False</code> <code>tutorial_only</code> <code>bool</code> <p>Only allow Anomaly module and force tutorial. Ignored if <code>already_running</code> is <code>True</code>.</p> <code>False</code> <code>context_in_body</code> <code>bool</code> <p>Whether to send the <code>context</code> <code>dict</code>  in the response body. Set to <code>True</code> if the resulting context is larger than 4KB.</p> <code>False</code> <code>wait_for_init_model</code> <code>bool</code> <p>Whether to wait for all models to be initialized before returning the Instance object. Ignored if <code>already_running</code> is <code>True</code>.</p> <code>False</code> <code>ping</code> <code>bool</code> <p>Whether to send a ping request to <code>HOST:PORT/ping</code> upon creating the instance.</p> <code>True</code> <code>gpu</code> <code>int</code> <p>Which GPU to start project on. Ignored if <code>already_running</code> is <code>True</code>.</p> <code>0</code> <p>Raises:</p> Type Description <code>DistNotExistsError</code> <p>If <code>dist_path</code> does not exist.</p> <code>DistNotFoundError</code> <p>If no PEKAT VISION was found in the default installation directory.</p> <code>PortIsAllocatedError</code> <p>If the specified port is already used by another process.</p> <code>ValueError</code> <p>If not <code>already_running</code> and project path is <code>None</code>.</p> <code>RuntimeError</code> <p>If the created process has no <code>stdout</code>.</p> <code>ProjectNotFoundError</code> <p>If the project was not found in the specified location.</p> <code>PekatNotStartedError</code> <p>If PEKAT VISION couldn't start a project.</p>"},{"location":"documentation/instance/#PekatVisionSDK.Instance.server_version","title":"server_version  <code>cached</code> <code>property</code>","text":"<pre><code>server_version: Version\n</code></pre> <p>Get the version of the PEKAT VISION server.</p>"},{"location":"documentation/instance/#PekatVisionSDK.Instance.analyze","title":"analyze","text":"<pre><code>analyze(\n    image: Union[NDArray[np.uint8], bytes, StrOrPathLike],\n    response_type: ResponseType = \"context\",\n    data: Optional[str] = None,\n    timeout: float = 20,\n) -&gt; Result\n</code></pre> <p>Send an image to the running project and get the results.</p> <p><code>response_type</code> will affect the <code>image</code> of the returned <code>Result</code>:</p> <ul> <li><code>\"context\"</code>: context only, <code>Result.image_bytes</code> will be <code>None</code>.</li> <li><code>\"image\"</code>: <code>Result.image_bytes</code> will contain the processed image.</li> <li><code>\"annotated_image\"</code>: <code>Result.image_bytes</code> will contain the processed image with drawn detected rectangles.</li> <li><code>\"heatmap\"</code>: <code>Result.image_bytes</code> will contain the layered heatmaps of the processed image.</li> </ul> <p>In order to decode the image in <code>Result.image_bytes</code>, use <code>get_decoded_image</code>.</p> <p>Parameters:</p> Name Type Description Default <code>image</code> <code>Union[NDArray[uint8], bytes, StrOrPathLike]</code> <p>Path to the image, encoded image bytes or numpy image.</p> required <code>response_type</code> <code>ResponseType</code> <p>Type of response data.</p> <code>'context'</code> <code>data</code> <code>Optional[str]</code> <p>Data to be added to the query. Project will be able to access this under the <code>\"data\"</code> key in <code>context</code>.</p> <code>None</code> <code>timeout</code> <code>float</code> <p>Timeout in seconds for the analyze request.</p> <code>20</code> <p>Raises:</p> Type Description <code>InvalidResponseTypeError</code> <p>If <code>response_type</code> is not any of the allowed response types.</p> <code>InvalidDataTypeError</code> <p>If <code>image</code> is not any of the allowed data types.</p> <code>Timeout</code> <p>Upon timeout.</p> <p>Returns:</p> Type Description <code>Result</code> <p>A tuple of image and <code>context</code>. If <code>response_type</code> is <code>\"context\"</code>, then the returned image is <code>None</code>.</p>"},{"location":"documentation/instance/#PekatVisionSDK.Instance.send_random","title":"send_random","text":"<pre><code>send_random(\n    shape: Tuple[int, ...] = (512, 512, 3),\n    response_type: ResponseType = \"context\",\n    data: Optional[str] = None,\n    timeout: float = 20,\n) -&gt; Result\n</code></pre> <p>Send random data for analysis.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>Tuple[int, ...]</code> <p>Shape of the image to be sent.</p> <code>(512, 512, 3)</code> <code>response_type</code> <code>ResponseType</code> <p>Type of response data.</p> <code>'context'</code> <code>data</code> <code>Optional[str]</code> <p>Data to be added to the query. Project will be able to access this under the <code>\"data\"</code> key in <code>context</code>.</p> <code>None</code> <code>timeout</code> <code>float</code> <p>Timeout in seconds for the analyze request.</p> <code>20</code> <p>Raises:</p> Type Description <code>Exception</code> <p>Same as <code>Instance.analyze</code></p> <p>Returns:</p> Type Description <code>Result</code> <p>A tuple of image and <code>context</code>. If <code>response_type</code> is <code>\"context\"</code>, then the returned image is <code>None</code>.</p>"},{"location":"documentation/instance/#PekatVisionSDK.Instance.stop","title":"stop","text":"<pre><code>stop(timeout: float = 5) -&gt; None\n</code></pre> <p>Stop the project if it's running and not stopping already.</p> <p>It can only stop the project if <code>already_running</code> was set to <code>False</code>.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>float</code> <p>Timeout in seconds to kill process.</p> <code>5</code> <p>Raises:</p> Type Description <code>NoConnectionError</code> <p>Upon timeout.</p>"},{"location":"documentation/instance/#PekatVisionSDK.Instance.ping","title":"ping","text":"<pre><code>ping(timeout: float = 5) -&gt; requests.Response\n</code></pre> <p>Ping the project to check if it's running.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>float</code> <p>Timeout in seconds to ping.</p> <code>5</code> <p>Raises:</p> Type Description <code>NoConnectionError</code> <p>Upon timeout.</p> <p>Returns:</p> Type Description <code>Response</code> <p>Ping response.</p>"},{"location":"documentation/result/","title":"Result","text":"<p>Class representing the result of <code>Instance.analyze</code>.</p> <p>Attributes:</p> Name Type Description <code>image_bytes</code> <code>Optional[bytes]</code> <p>Encoded PNG image, to get the decoded image, use <code>get_decoded_image</code>.</p> <code>context</code> <code>dict</code> <p>Context dictionary.</p> <p>Methods:</p> Name Description <code>get_decoded_image</code> <p>Get the decoded image.</p>"},{"location":"documentation/result/#PekatVisionSDK.Result.get_decoded_image","title":"get_decoded_image","text":"<pre><code>get_decoded_image() -&gt; NDArray[np.uint8]\n</code></pre> <p>Get the decoded image.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If image is <code>None</code>, usually when <code>response_type</code> is <code>\"context\"</code>.</p> <code>OpenCVImportError</code> <p>If image is not <code>None</code> and OpenCV is not installed.</p>"}]}